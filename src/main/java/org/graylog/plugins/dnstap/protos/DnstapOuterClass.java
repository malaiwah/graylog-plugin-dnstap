// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dnstap.proto

package org.graylog.plugins.dnstap.protos;

public final class DnstapOuterClass {
  private DnstapOuterClass() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * <pre>
   * SocketFamily: the network protocol family of a socket. This specifies how
   * to interpret "network address" fields.
   * </pre>
   *
   * Protobuf enum {@code dnstap.SocketFamily}
   */
  public enum SocketFamily
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * IPv4 (RFC 791)
     * </pre>
     *
     * <code>INET = 1;</code>
     */
    INET(1),
    /**
     * <pre>
     * IPv6 (RFC 2460)
     * </pre>
     *
     * <code>INET6 = 2;</code>
     */
    INET6(2),
    ;

    /**
     * <pre>
     * IPv4 (RFC 791)
     * </pre>
     *
     * <code>INET = 1;</code>
     */
    public static final int INET_VALUE = 1;
    /**
     * <pre>
     * IPv6 (RFC 2460)
     * </pre>
     *
     * <code>INET6 = 2;</code>
     */
    public static final int INET6_VALUE = 2;


    public final int getNumber() {
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static SocketFamily valueOf(int value) {
      return forNumber(value);
    }

    public static SocketFamily forNumber(int value) {
      switch (value) {
        case 1: return INET;
        case 2: return INET6;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<SocketFamily>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        SocketFamily> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<SocketFamily>() {
            public SocketFamily findValueByNumber(int number) {
              return SocketFamily.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return org.graylog.plugins.dnstap.protos.DnstapOuterClass.getDescriptor().getEnumTypes().get(0);
    }

    private static final SocketFamily[] VALUES = values();

    public static SocketFamily valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private SocketFamily(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:dnstap.SocketFamily)
  }

  /**
   * <pre>
   * SocketProtocol: the transport protocol of a socket. This specifies how to
   * interpret "transport port" fields.
   * </pre>
   *
   * Protobuf enum {@code dnstap.SocketProtocol}
   */
  public enum SocketProtocol
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * User Datagram Protocol (RFC 768)
     * </pre>
     *
     * <code>UDP = 1;</code>
     */
    UDP(1),
    /**
     * <pre>
     * Transmission Control Protocol (RFC 793)
     * </pre>
     *
     * <code>TCP = 2;</code>
     */
    TCP(2),
    ;

    /**
     * <pre>
     * User Datagram Protocol (RFC 768)
     * </pre>
     *
     * <code>UDP = 1;</code>
     */
    public static final int UDP_VALUE = 1;
    /**
     * <pre>
     * Transmission Control Protocol (RFC 793)
     * </pre>
     *
     * <code>TCP = 2;</code>
     */
    public static final int TCP_VALUE = 2;


    public final int getNumber() {
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static SocketProtocol valueOf(int value) {
      return forNumber(value);
    }

    public static SocketProtocol forNumber(int value) {
      switch (value) {
        case 1: return UDP;
        case 2: return TCP;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<SocketProtocol>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        SocketProtocol> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<SocketProtocol>() {
            public SocketProtocol findValueByNumber(int number) {
              return SocketProtocol.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return org.graylog.plugins.dnstap.protos.DnstapOuterClass.getDescriptor().getEnumTypes().get(1);
    }

    private static final SocketProtocol[] VALUES = values();

    public static SocketProtocol valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private SocketProtocol(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:dnstap.SocketProtocol)
  }

  public interface DnstapOrBuilder extends
      // @@protoc_insertion_point(interface_extends:dnstap.Dnstap)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * DNS server identity.
     * If enabled, this is the identity string of the DNS server which generated
     * this message. Typically this would be the same string as returned by an
     * "NSID" (RFC 5001) query.
     * </pre>
     *
     * <code>optional bytes identity = 1;</code>
     */
    boolean hasIdentity();
    /**
     * <pre>
     * DNS server identity.
     * If enabled, this is the identity string of the DNS server which generated
     * this message. Typically this would be the same string as returned by an
     * "NSID" (RFC 5001) query.
     * </pre>
     *
     * <code>optional bytes identity = 1;</code>
     */
    com.google.protobuf.ByteString getIdentity();

    /**
     * <pre>
     * DNS server version.
     * If enabled, this is the version string of the DNS server which generated
     * this message. Typically this would be the same string as returned by a
     * "version.bind" query.
     * </pre>
     *
     * <code>optional bytes version = 2;</code>
     */
    boolean hasVersion();
    /**
     * <pre>
     * DNS server version.
     * If enabled, this is the version string of the DNS server which generated
     * this message. Typically this would be the same string as returned by a
     * "version.bind" query.
     * </pre>
     *
     * <code>optional bytes version = 2;</code>
     */
    com.google.protobuf.ByteString getVersion();

    /**
     * <pre>
     * Extra data for this payload.
     * This field can be used for adding an arbitrary byte-string annotation to
     * the payload. No encoding or interpretation is applied or enforced.
     * </pre>
     *
     * <code>optional bytes extra = 3;</code>
     */
    boolean hasExtra();
    /**
     * <pre>
     * Extra data for this payload.
     * This field can be used for adding an arbitrary byte-string annotation to
     * the payload. No encoding or interpretation is applied or enforced.
     * </pre>
     *
     * <code>optional bytes extra = 3;</code>
     */
    com.google.protobuf.ByteString getExtra();

    /**
     * <code>required .dnstap.Dnstap.Type type = 15;</code>
     */
    boolean hasType();
    /**
     * <code>required .dnstap.Dnstap.Type type = 15;</code>
     */
    org.graylog.plugins.dnstap.protos.DnstapOuterClass.Dnstap.Type getType();

    /**
     * <pre>
     * One of the following will be filled in.
     * </pre>
     *
     * <code>optional .dnstap.Message message = 14;</code>
     */
    boolean hasMessage();
    /**
     * <pre>
     * One of the following will be filled in.
     * </pre>
     *
     * <code>optional .dnstap.Message message = 14;</code>
     */
    org.graylog.plugins.dnstap.protos.DnstapOuterClass.Message getMessage();
    /**
     * <pre>
     * One of the following will be filled in.
     * </pre>
     *
     * <code>optional .dnstap.Message message = 14;</code>
     */
    org.graylog.plugins.dnstap.protos.DnstapOuterClass.MessageOrBuilder getMessageOrBuilder();
  }
  /**
   * <pre>
   * "Dnstap": this is the top-level dnstap type, which is a "union" type that
   * contains other kinds of dnstap payloads, although currently only one type
   * of dnstap payload is defined.
   * See: https://developers.google.com/protocol-buffers/docs/techniques#union
   * </pre>
   *
   * Protobuf type {@code dnstap.Dnstap}
   */
  public  static final class Dnstap extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:dnstap.Dnstap)
      DnstapOrBuilder {
    // Use Dnstap.newBuilder() to construct.
    private Dnstap(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Dnstap() {
      identity_ = com.google.protobuf.ByteString.EMPTY;
      version_ = com.google.protobuf.ByteString.EMPTY;
      extra_ = com.google.protobuf.ByteString.EMPTY;
      type_ = 1;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Dnstap(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              identity_ = input.readBytes();
              break;
            }
            case 18: {
              bitField0_ |= 0x00000002;
              version_ = input.readBytes();
              break;
            }
            case 26: {
              bitField0_ |= 0x00000004;
              extra_ = input.readBytes();
              break;
            }
            case 114: {
              org.graylog.plugins.dnstap.protos.DnstapOuterClass.Message.Builder subBuilder = null;
              if (((bitField0_ & 0x00000010) == 0x00000010)) {
                subBuilder = message_.toBuilder();
              }
              message_ = input.readMessage(org.graylog.plugins.dnstap.protos.DnstapOuterClass.Message.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(message_);
                message_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000010;
              break;
            }
            case 120: {
              int rawValue = input.readEnum();
              org.graylog.plugins.dnstap.protos.DnstapOuterClass.Dnstap.Type value = org.graylog.plugins.dnstap.protos.DnstapOuterClass.Dnstap.Type.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(15, rawValue);
              } else {
                bitField0_ |= 0x00000008;
                type_ = rawValue;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.graylog.plugins.dnstap.protos.DnstapOuterClass.internal_static_dnstap_Dnstap_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.graylog.plugins.dnstap.protos.DnstapOuterClass.internal_static_dnstap_Dnstap_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.graylog.plugins.dnstap.protos.DnstapOuterClass.Dnstap.class, org.graylog.plugins.dnstap.protos.DnstapOuterClass.Dnstap.Builder.class);
    }

    /**
     * <pre>
     * Identifies which field below is filled in.
     * </pre>
     *
     * Protobuf enum {@code dnstap.Dnstap.Type}
     */
    public enum Type
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>MESSAGE = 1;</code>
       */
      MESSAGE(1),
      ;

      /**
       * <code>MESSAGE = 1;</code>
       */
      public static final int MESSAGE_VALUE = 1;


      public final int getNumber() {
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static Type valueOf(int value) {
        return forNumber(value);
      }

      public static Type forNumber(int value) {
        switch (value) {
          case 1: return MESSAGE;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<Type>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          Type> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Type>() {
              public Type findValueByNumber(int number) {
                return Type.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return org.graylog.plugins.dnstap.protos.DnstapOuterClass.Dnstap.getDescriptor().getEnumTypes().get(0);
      }

      private static final Type[] VALUES = values();

      public static Type valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private Type(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:dnstap.Dnstap.Type)
    }

    private int bitField0_;
    public static final int IDENTITY_FIELD_NUMBER = 1;
    private com.google.protobuf.ByteString identity_;
    /**
     * <pre>
     * DNS server identity.
     * If enabled, this is the identity string of the DNS server which generated
     * this message. Typically this would be the same string as returned by an
     * "NSID" (RFC 5001) query.
     * </pre>
     *
     * <code>optional bytes identity = 1;</code>
     */
    public boolean hasIdentity() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     * DNS server identity.
     * If enabled, this is the identity string of the DNS server which generated
     * this message. Typically this would be the same string as returned by an
     * "NSID" (RFC 5001) query.
     * </pre>
     *
     * <code>optional bytes identity = 1;</code>
     */
    public com.google.protobuf.ByteString getIdentity() {
      return identity_;
    }

    public static final int VERSION_FIELD_NUMBER = 2;
    private com.google.protobuf.ByteString version_;
    /**
     * <pre>
     * DNS server version.
     * If enabled, this is the version string of the DNS server which generated
     * this message. Typically this would be the same string as returned by a
     * "version.bind" query.
     * </pre>
     *
     * <code>optional bytes version = 2;</code>
     */
    public boolean hasVersion() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     * DNS server version.
     * If enabled, this is the version string of the DNS server which generated
     * this message. Typically this would be the same string as returned by a
     * "version.bind" query.
     * </pre>
     *
     * <code>optional bytes version = 2;</code>
     */
    public com.google.protobuf.ByteString getVersion() {
      return version_;
    }

    public static final int EXTRA_FIELD_NUMBER = 3;
    private com.google.protobuf.ByteString extra_;
    /**
     * <pre>
     * Extra data for this payload.
     * This field can be used for adding an arbitrary byte-string annotation to
     * the payload. No encoding or interpretation is applied or enforced.
     * </pre>
     *
     * <code>optional bytes extra = 3;</code>
     */
    public boolean hasExtra() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <pre>
     * Extra data for this payload.
     * This field can be used for adding an arbitrary byte-string annotation to
     * the payload. No encoding or interpretation is applied or enforced.
     * </pre>
     *
     * <code>optional bytes extra = 3;</code>
     */
    public com.google.protobuf.ByteString getExtra() {
      return extra_;
    }

    public static final int TYPE_FIELD_NUMBER = 15;
    private int type_;
    /**
     * <code>required .dnstap.Dnstap.Type type = 15;</code>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required .dnstap.Dnstap.Type type = 15;</code>
     */
    public org.graylog.plugins.dnstap.protos.DnstapOuterClass.Dnstap.Type getType() {
      org.graylog.plugins.dnstap.protos.DnstapOuterClass.Dnstap.Type result = org.graylog.plugins.dnstap.protos.DnstapOuterClass.Dnstap.Type.valueOf(type_);
      return result == null ? org.graylog.plugins.dnstap.protos.DnstapOuterClass.Dnstap.Type.MESSAGE : result;
    }

    public static final int MESSAGE_FIELD_NUMBER = 14;
    private org.graylog.plugins.dnstap.protos.DnstapOuterClass.Message message_;
    /**
     * <pre>
     * One of the following will be filled in.
     * </pre>
     *
     * <code>optional .dnstap.Message message = 14;</code>
     */
    public boolean hasMessage() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <pre>
     * One of the following will be filled in.
     * </pre>
     *
     * <code>optional .dnstap.Message message = 14;</code>
     */
    public org.graylog.plugins.dnstap.protos.DnstapOuterClass.Message getMessage() {
      return message_ == null ? org.graylog.plugins.dnstap.protos.DnstapOuterClass.Message.getDefaultInstance() : message_;
    }
    /**
     * <pre>
     * One of the following will be filled in.
     * </pre>
     *
     * <code>optional .dnstap.Message message = 14;</code>
     */
    public org.graylog.plugins.dnstap.protos.DnstapOuterClass.MessageOrBuilder getMessageOrBuilder() {
      return message_ == null ? org.graylog.plugins.dnstap.protos.DnstapOuterClass.Message.getDefaultInstance() : message_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasMessage()) {
        if (!getMessage().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, identity_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, version_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(3, extra_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeMessage(14, getMessage());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeEnum(15, type_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, identity_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, version_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, extra_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(14, getMessage());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(15, type_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.graylog.plugins.dnstap.protos.DnstapOuterClass.Dnstap)) {
        return super.equals(obj);
      }
      org.graylog.plugins.dnstap.protos.DnstapOuterClass.Dnstap other = (org.graylog.plugins.dnstap.protos.DnstapOuterClass.Dnstap) obj;

      boolean result = true;
      result = result && (hasIdentity() == other.hasIdentity());
      if (hasIdentity()) {
        result = result && getIdentity()
            .equals(other.getIdentity());
      }
      result = result && (hasVersion() == other.hasVersion());
      if (hasVersion()) {
        result = result && getVersion()
            .equals(other.getVersion());
      }
      result = result && (hasExtra() == other.hasExtra());
      if (hasExtra()) {
        result = result && getExtra()
            .equals(other.getExtra());
      }
      result = result && (hasType() == other.hasType());
      if (hasType()) {
        result = result && type_ == other.type_;
      }
      result = result && (hasMessage() == other.hasMessage());
      if (hasMessage()) {
        result = result && getMessage()
            .equals(other.getMessage());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (hasIdentity()) {
        hash = (37 * hash) + IDENTITY_FIELD_NUMBER;
        hash = (53 * hash) + getIdentity().hashCode();
      }
      if (hasVersion()) {
        hash = (37 * hash) + VERSION_FIELD_NUMBER;
        hash = (53 * hash) + getVersion().hashCode();
      }
      if (hasExtra()) {
        hash = (37 * hash) + EXTRA_FIELD_NUMBER;
        hash = (53 * hash) + getExtra().hashCode();
      }
      if (hasType()) {
        hash = (37 * hash) + TYPE_FIELD_NUMBER;
        hash = (53 * hash) + type_;
      }
      if (hasMessage()) {
        hash = (37 * hash) + MESSAGE_FIELD_NUMBER;
        hash = (53 * hash) + getMessage().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.graylog.plugins.dnstap.protos.DnstapOuterClass.Dnstap parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.graylog.plugins.dnstap.protos.DnstapOuterClass.Dnstap parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.graylog.plugins.dnstap.protos.DnstapOuterClass.Dnstap parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.graylog.plugins.dnstap.protos.DnstapOuterClass.Dnstap parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.graylog.plugins.dnstap.protos.DnstapOuterClass.Dnstap parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.graylog.plugins.dnstap.protos.DnstapOuterClass.Dnstap parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.graylog.plugins.dnstap.protos.DnstapOuterClass.Dnstap parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.graylog.plugins.dnstap.protos.DnstapOuterClass.Dnstap parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.graylog.plugins.dnstap.protos.DnstapOuterClass.Dnstap parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.graylog.plugins.dnstap.protos.DnstapOuterClass.Dnstap parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.graylog.plugins.dnstap.protos.DnstapOuterClass.Dnstap prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * "Dnstap": this is the top-level dnstap type, which is a "union" type that
     * contains other kinds of dnstap payloads, although currently only one type
     * of dnstap payload is defined.
     * See: https://developers.google.com/protocol-buffers/docs/techniques#union
     * </pre>
     *
     * Protobuf type {@code dnstap.Dnstap}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:dnstap.Dnstap)
        org.graylog.plugins.dnstap.protos.DnstapOuterClass.DnstapOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.graylog.plugins.dnstap.protos.DnstapOuterClass.internal_static_dnstap_Dnstap_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.graylog.plugins.dnstap.protos.DnstapOuterClass.internal_static_dnstap_Dnstap_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.graylog.plugins.dnstap.protos.DnstapOuterClass.Dnstap.class, org.graylog.plugins.dnstap.protos.DnstapOuterClass.Dnstap.Builder.class);
      }

      // Construct using org.graylog.plugins.dnstap.protos.DnstapOuterClass.Dnstap.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getMessageFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        identity_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        version_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000002);
        extra_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000004);
        type_ = 1;
        bitField0_ = (bitField0_ & ~0x00000008);
        if (messageBuilder_ == null) {
          message_ = null;
        } else {
          messageBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.graylog.plugins.dnstap.protos.DnstapOuterClass.internal_static_dnstap_Dnstap_descriptor;
      }

      public org.graylog.plugins.dnstap.protos.DnstapOuterClass.Dnstap getDefaultInstanceForType() {
        return org.graylog.plugins.dnstap.protos.DnstapOuterClass.Dnstap.getDefaultInstance();
      }

      public org.graylog.plugins.dnstap.protos.DnstapOuterClass.Dnstap build() {
        org.graylog.plugins.dnstap.protos.DnstapOuterClass.Dnstap result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.graylog.plugins.dnstap.protos.DnstapOuterClass.Dnstap buildPartial() {
        org.graylog.plugins.dnstap.protos.DnstapOuterClass.Dnstap result = new org.graylog.plugins.dnstap.protos.DnstapOuterClass.Dnstap(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.identity_ = identity_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.version_ = version_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.extra_ = extra_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.type_ = type_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        if (messageBuilder_ == null) {
          result.message_ = message_;
        } else {
          result.message_ = messageBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.graylog.plugins.dnstap.protos.DnstapOuterClass.Dnstap) {
          return mergeFrom((org.graylog.plugins.dnstap.protos.DnstapOuterClass.Dnstap)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.graylog.plugins.dnstap.protos.DnstapOuterClass.Dnstap other) {
        if (other == org.graylog.plugins.dnstap.protos.DnstapOuterClass.Dnstap.getDefaultInstance()) return this;
        if (other.hasIdentity()) {
          setIdentity(other.getIdentity());
        }
        if (other.hasVersion()) {
          setVersion(other.getVersion());
        }
        if (other.hasExtra()) {
          setExtra(other.getExtra());
        }
        if (other.hasType()) {
          setType(other.getType());
        }
        if (other.hasMessage()) {
          mergeMessage(other.getMessage());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        if (!hasType()) {
          return false;
        }
        if (hasMessage()) {
          if (!getMessage().isInitialized()) {
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.graylog.plugins.dnstap.protos.DnstapOuterClass.Dnstap parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.graylog.plugins.dnstap.protos.DnstapOuterClass.Dnstap) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.ByteString identity_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * DNS server identity.
       * If enabled, this is the identity string of the DNS server which generated
       * this message. Typically this would be the same string as returned by an
       * "NSID" (RFC 5001) query.
       * </pre>
       *
       * <code>optional bytes identity = 1;</code>
       */
      public boolean hasIdentity() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       * DNS server identity.
       * If enabled, this is the identity string of the DNS server which generated
       * this message. Typically this would be the same string as returned by an
       * "NSID" (RFC 5001) query.
       * </pre>
       *
       * <code>optional bytes identity = 1;</code>
       */
      public com.google.protobuf.ByteString getIdentity() {
        return identity_;
      }
      /**
       * <pre>
       * DNS server identity.
       * If enabled, this is the identity string of the DNS server which generated
       * this message. Typically this would be the same string as returned by an
       * "NSID" (RFC 5001) query.
       * </pre>
       *
       * <code>optional bytes identity = 1;</code>
       */
      public Builder setIdentity(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        identity_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * DNS server identity.
       * If enabled, this is the identity string of the DNS server which generated
       * this message. Typically this would be the same string as returned by an
       * "NSID" (RFC 5001) query.
       * </pre>
       *
       * <code>optional bytes identity = 1;</code>
       */
      public Builder clearIdentity() {
        bitField0_ = (bitField0_ & ~0x00000001);
        identity_ = getDefaultInstance().getIdentity();
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString version_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * DNS server version.
       * If enabled, this is the version string of the DNS server which generated
       * this message. Typically this would be the same string as returned by a
       * "version.bind" query.
       * </pre>
       *
       * <code>optional bytes version = 2;</code>
       */
      public boolean hasVersion() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <pre>
       * DNS server version.
       * If enabled, this is the version string of the DNS server which generated
       * this message. Typically this would be the same string as returned by a
       * "version.bind" query.
       * </pre>
       *
       * <code>optional bytes version = 2;</code>
       */
      public com.google.protobuf.ByteString getVersion() {
        return version_;
      }
      /**
       * <pre>
       * DNS server version.
       * If enabled, this is the version string of the DNS server which generated
       * this message. Typically this would be the same string as returned by a
       * "version.bind" query.
       * </pre>
       *
       * <code>optional bytes version = 2;</code>
       */
      public Builder setVersion(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        version_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * DNS server version.
       * If enabled, this is the version string of the DNS server which generated
       * this message. Typically this would be the same string as returned by a
       * "version.bind" query.
       * </pre>
       *
       * <code>optional bytes version = 2;</code>
       */
      public Builder clearVersion() {
        bitField0_ = (bitField0_ & ~0x00000002);
        version_ = getDefaultInstance().getVersion();
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString extra_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * Extra data for this payload.
       * This field can be used for adding an arbitrary byte-string annotation to
       * the payload. No encoding or interpretation is applied or enforced.
       * </pre>
       *
       * <code>optional bytes extra = 3;</code>
       */
      public boolean hasExtra() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <pre>
       * Extra data for this payload.
       * This field can be used for adding an arbitrary byte-string annotation to
       * the payload. No encoding or interpretation is applied or enforced.
       * </pre>
       *
       * <code>optional bytes extra = 3;</code>
       */
      public com.google.protobuf.ByteString getExtra() {
        return extra_;
      }
      /**
       * <pre>
       * Extra data for this payload.
       * This field can be used for adding an arbitrary byte-string annotation to
       * the payload. No encoding or interpretation is applied or enforced.
       * </pre>
       *
       * <code>optional bytes extra = 3;</code>
       */
      public Builder setExtra(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        extra_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Extra data for this payload.
       * This field can be used for adding an arbitrary byte-string annotation to
       * the payload. No encoding or interpretation is applied or enforced.
       * </pre>
       *
       * <code>optional bytes extra = 3;</code>
       */
      public Builder clearExtra() {
        bitField0_ = (bitField0_ & ~0x00000004);
        extra_ = getDefaultInstance().getExtra();
        onChanged();
        return this;
      }

      private int type_ = 1;
      /**
       * <code>required .dnstap.Dnstap.Type type = 15;</code>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required .dnstap.Dnstap.Type type = 15;</code>
       */
      public org.graylog.plugins.dnstap.protos.DnstapOuterClass.Dnstap.Type getType() {
        org.graylog.plugins.dnstap.protos.DnstapOuterClass.Dnstap.Type result = org.graylog.plugins.dnstap.protos.DnstapOuterClass.Dnstap.Type.valueOf(type_);
        return result == null ? org.graylog.plugins.dnstap.protos.DnstapOuterClass.Dnstap.Type.MESSAGE : result;
      }
      /**
       * <code>required .dnstap.Dnstap.Type type = 15;</code>
       */
      public Builder setType(org.graylog.plugins.dnstap.protos.DnstapOuterClass.Dnstap.Type value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000008;
        type_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>required .dnstap.Dnstap.Type type = 15;</code>
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000008);
        type_ = 1;
        onChanged();
        return this;
      }

      private org.graylog.plugins.dnstap.protos.DnstapOuterClass.Message message_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          org.graylog.plugins.dnstap.protos.DnstapOuterClass.Message, org.graylog.plugins.dnstap.protos.DnstapOuterClass.Message.Builder, org.graylog.plugins.dnstap.protos.DnstapOuterClass.MessageOrBuilder> messageBuilder_;
      /**
       * <pre>
       * One of the following will be filled in.
       * </pre>
       *
       * <code>optional .dnstap.Message message = 14;</code>
       */
      public boolean hasMessage() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <pre>
       * One of the following will be filled in.
       * </pre>
       *
       * <code>optional .dnstap.Message message = 14;</code>
       */
      public org.graylog.plugins.dnstap.protos.DnstapOuterClass.Message getMessage() {
        if (messageBuilder_ == null) {
          return message_ == null ? org.graylog.plugins.dnstap.protos.DnstapOuterClass.Message.getDefaultInstance() : message_;
        } else {
          return messageBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * One of the following will be filled in.
       * </pre>
       *
       * <code>optional .dnstap.Message message = 14;</code>
       */
      public Builder setMessage(org.graylog.plugins.dnstap.protos.DnstapOuterClass.Message value) {
        if (messageBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          message_ = value;
          onChanged();
        } else {
          messageBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <pre>
       * One of the following will be filled in.
       * </pre>
       *
       * <code>optional .dnstap.Message message = 14;</code>
       */
      public Builder setMessage(
          org.graylog.plugins.dnstap.protos.DnstapOuterClass.Message.Builder builderForValue) {
        if (messageBuilder_ == null) {
          message_ = builderForValue.build();
          onChanged();
        } else {
          messageBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <pre>
       * One of the following will be filled in.
       * </pre>
       *
       * <code>optional .dnstap.Message message = 14;</code>
       */
      public Builder mergeMessage(org.graylog.plugins.dnstap.protos.DnstapOuterClass.Message value) {
        if (messageBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010) &&
              message_ != null &&
              message_ != org.graylog.plugins.dnstap.protos.DnstapOuterClass.Message.getDefaultInstance()) {
            message_ =
              org.graylog.plugins.dnstap.protos.DnstapOuterClass.Message.newBuilder(message_).mergeFrom(value).buildPartial();
          } else {
            message_ = value;
          }
          onChanged();
        } else {
          messageBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <pre>
       * One of the following will be filled in.
       * </pre>
       *
       * <code>optional .dnstap.Message message = 14;</code>
       */
      public Builder clearMessage() {
        if (messageBuilder_ == null) {
          message_ = null;
          onChanged();
        } else {
          messageBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }
      /**
       * <pre>
       * One of the following will be filled in.
       * </pre>
       *
       * <code>optional .dnstap.Message message = 14;</code>
       */
      public org.graylog.plugins.dnstap.protos.DnstapOuterClass.Message.Builder getMessageBuilder() {
        bitField0_ |= 0x00000010;
        onChanged();
        return getMessageFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * One of the following will be filled in.
       * </pre>
       *
       * <code>optional .dnstap.Message message = 14;</code>
       */
      public org.graylog.plugins.dnstap.protos.DnstapOuterClass.MessageOrBuilder getMessageOrBuilder() {
        if (messageBuilder_ != null) {
          return messageBuilder_.getMessageOrBuilder();
        } else {
          return message_ == null ?
              org.graylog.plugins.dnstap.protos.DnstapOuterClass.Message.getDefaultInstance() : message_;
        }
      }
      /**
       * <pre>
       * One of the following will be filled in.
       * </pre>
       *
       * <code>optional .dnstap.Message message = 14;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.graylog.plugins.dnstap.protos.DnstapOuterClass.Message, org.graylog.plugins.dnstap.protos.DnstapOuterClass.Message.Builder, org.graylog.plugins.dnstap.protos.DnstapOuterClass.MessageOrBuilder>
          getMessageFieldBuilder() {
        if (messageBuilder_ == null) {
          messageBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.graylog.plugins.dnstap.protos.DnstapOuterClass.Message, org.graylog.plugins.dnstap.protos.DnstapOuterClass.Message.Builder, org.graylog.plugins.dnstap.protos.DnstapOuterClass.MessageOrBuilder>(
                  getMessage(),
                  getParentForChildren(),
                  isClean());
          message_ = null;
        }
        return messageBuilder_;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:dnstap.Dnstap)
    }

    // @@protoc_insertion_point(class_scope:dnstap.Dnstap)
    private static final org.graylog.plugins.dnstap.protos.DnstapOuterClass.Dnstap DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.graylog.plugins.dnstap.protos.DnstapOuterClass.Dnstap();
    }

    public static org.graylog.plugins.dnstap.protos.DnstapOuterClass.Dnstap getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<Dnstap>
        PARSER = new com.google.protobuf.AbstractParser<Dnstap>() {
      public Dnstap parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new Dnstap(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Dnstap> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Dnstap> getParserForType() {
      return PARSER;
    }

    public org.graylog.plugins.dnstap.protos.DnstapOuterClass.Dnstap getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface MessageOrBuilder extends
      // @@protoc_insertion_point(interface_extends:dnstap.Message)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * One of the Type values described above.
     * </pre>
     *
     * <code>required .dnstap.Message.Type type = 1;</code>
     */
    boolean hasType();
    /**
     * <pre>
     * One of the Type values described above.
     * </pre>
     *
     * <code>required .dnstap.Message.Type type = 1;</code>
     */
    org.graylog.plugins.dnstap.protos.DnstapOuterClass.Message.Type getType();

    /**
     * <pre>
     * One of the SocketFamily values described above.
     * </pre>
     *
     * <code>optional .dnstap.SocketFamily socket_family = 2;</code>
     */
    boolean hasSocketFamily();
    /**
     * <pre>
     * One of the SocketFamily values described above.
     * </pre>
     *
     * <code>optional .dnstap.SocketFamily socket_family = 2;</code>
     */
    org.graylog.plugins.dnstap.protos.DnstapOuterClass.SocketFamily getSocketFamily();

    /**
     * <pre>
     * One of the SocketProtocol values described above.
     * </pre>
     *
     * <code>optional .dnstap.SocketProtocol socket_protocol = 3;</code>
     */
    boolean hasSocketProtocol();
    /**
     * <pre>
     * One of the SocketProtocol values described above.
     * </pre>
     *
     * <code>optional .dnstap.SocketProtocol socket_protocol = 3;</code>
     */
    org.graylog.plugins.dnstap.protos.DnstapOuterClass.SocketProtocol getSocketProtocol();

    /**
     * <pre>
     * The network address of the message initiator.
     * For SocketFamily INET, this field is 4 octets (IPv4 address).
     * For SocketFamily INET6, this field is 16 octets (IPv6 address).
     * </pre>
     *
     * <code>optional bytes query_address = 4;</code>
     */
    boolean hasQueryAddress();
    /**
     * <pre>
     * The network address of the message initiator.
     * For SocketFamily INET, this field is 4 octets (IPv4 address).
     * For SocketFamily INET6, this field is 16 octets (IPv6 address).
     * </pre>
     *
     * <code>optional bytes query_address = 4;</code>
     */
    com.google.protobuf.ByteString getQueryAddress();

    /**
     * <pre>
     * The network address of the message responder.
     * For SocketFamily INET, this field is 4 octets (IPv4 address).
     * For SocketFamily INET6, this field is 16 octets (IPv6 address).
     * </pre>
     *
     * <code>optional bytes response_address = 5;</code>
     */
    boolean hasResponseAddress();
    /**
     * <pre>
     * The network address of the message responder.
     * For SocketFamily INET, this field is 4 octets (IPv4 address).
     * For SocketFamily INET6, this field is 16 octets (IPv6 address).
     * </pre>
     *
     * <code>optional bytes response_address = 5;</code>
     */
    com.google.protobuf.ByteString getResponseAddress();

    /**
     * <pre>
     * The transport port of the message initiator.
     * This is a 16-bit UDP or TCP port number, depending on SocketProtocol.
     * </pre>
     *
     * <code>optional uint32 query_port = 6;</code>
     */
    boolean hasQueryPort();
    /**
     * <pre>
     * The transport port of the message initiator.
     * This is a 16-bit UDP or TCP port number, depending on SocketProtocol.
     * </pre>
     *
     * <code>optional uint32 query_port = 6;</code>
     */
    int getQueryPort();

    /**
     * <pre>
     * The transport port of the message responder.
     * This is a 16-bit UDP or TCP port number, depending on SocketProtocol.
     * </pre>
     *
     * <code>optional uint32 response_port = 7;</code>
     */
    boolean hasResponsePort();
    /**
     * <pre>
     * The transport port of the message responder.
     * This is a 16-bit UDP or TCP port number, depending on SocketProtocol.
     * </pre>
     *
     * <code>optional uint32 response_port = 7;</code>
     */
    int getResponsePort();

    /**
     * <pre>
     * The time at which the DNS query message was sent or received, depending
     * on whether this is an AUTH_QUERY, RESOLVER_QUERY, or CLIENT_QUERY.
     * This is the number of seconds since the UNIX epoch.
     * </pre>
     *
     * <code>optional uint64 query_time_sec = 8;</code>
     */
    boolean hasQueryTimeSec();
    /**
     * <pre>
     * The time at which the DNS query message was sent or received, depending
     * on whether this is an AUTH_QUERY, RESOLVER_QUERY, or CLIENT_QUERY.
     * This is the number of seconds since the UNIX epoch.
     * </pre>
     *
     * <code>optional uint64 query_time_sec = 8;</code>
     */
    long getQueryTimeSec();

    /**
     * <pre>
     * The time at which the DNS query message was sent or received.
     * This is the seconds fraction, expressed as a count of nanoseconds.
     * </pre>
     *
     * <code>optional fixed32 query_time_nsec = 9;</code>
     */
    boolean hasQueryTimeNsec();
    /**
     * <pre>
     * The time at which the DNS query message was sent or received.
     * This is the seconds fraction, expressed as a count of nanoseconds.
     * </pre>
     *
     * <code>optional fixed32 query_time_nsec = 9;</code>
     */
    int getQueryTimeNsec();

    /**
     * <pre>
     * The initiator's original wire-format DNS query message, verbatim.
     * </pre>
     *
     * <code>optional bytes query_message = 10;</code>
     */
    boolean hasQueryMessage();
    /**
     * <pre>
     * The initiator's original wire-format DNS query message, verbatim.
     * </pre>
     *
     * <code>optional bytes query_message = 10;</code>
     */
    com.google.protobuf.ByteString getQueryMessage();

    /**
     * <pre>
     * The "zone" or "bailiwick" pertaining to the DNS query message.
     * This is a wire-format DNS domain name.
     * </pre>
     *
     * <code>optional bytes query_zone = 11;</code>
     */
    boolean hasQueryZone();
    /**
     * <pre>
     * The "zone" or "bailiwick" pertaining to the DNS query message.
     * This is a wire-format DNS domain name.
     * </pre>
     *
     * <code>optional bytes query_zone = 11;</code>
     */
    com.google.protobuf.ByteString getQueryZone();

    /**
     * <pre>
     * The time at which the DNS response message was sent or received,
     * depending on whether this is an AUTH_RESPONSE, RESOLVER_RESPONSE, or
     * CLIENT_RESPONSE.
     * This is the number of seconds since the UNIX epoch.
     * </pre>
     *
     * <code>optional uint64 response_time_sec = 12;</code>
     */
    boolean hasResponseTimeSec();
    /**
     * <pre>
     * The time at which the DNS response message was sent or received,
     * depending on whether this is an AUTH_RESPONSE, RESOLVER_RESPONSE, or
     * CLIENT_RESPONSE.
     * This is the number of seconds since the UNIX epoch.
     * </pre>
     *
     * <code>optional uint64 response_time_sec = 12;</code>
     */
    long getResponseTimeSec();

    /**
     * <pre>
     * The time at which the DNS response message was sent or received.
     * This is the seconds fraction, expressed as a count of nanoseconds.
     * </pre>
     *
     * <code>optional fixed32 response_time_nsec = 13;</code>
     */
    boolean hasResponseTimeNsec();
    /**
     * <pre>
     * The time at which the DNS response message was sent or received.
     * This is the seconds fraction, expressed as a count of nanoseconds.
     * </pre>
     *
     * <code>optional fixed32 response_time_nsec = 13;</code>
     */
    int getResponseTimeNsec();

    /**
     * <pre>
     * The responder's original wire-format DNS response message, verbatim.
     * </pre>
     *
     * <code>optional bytes response_message = 14;</code>
     */
    boolean hasResponseMessage();
    /**
     * <pre>
     * The responder's original wire-format DNS response message, verbatim.
     * </pre>
     *
     * <code>optional bytes response_message = 14;</code>
     */
    com.google.protobuf.ByteString getResponseMessage();
  }
  /**
   * <pre>
   * Message: a wire-format (RFC 1035 section 4) DNS message and associated
   * metadata. Applications generating "Message" payloads should follow
   * certain requirements based on the MessageType, see below.
   * </pre>
   *
   * Protobuf type {@code dnstap.Message}
   */
  public  static final class Message extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:dnstap.Message)
      MessageOrBuilder {
    // Use Message.newBuilder() to construct.
    private Message(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Message() {
      type_ = 1;
      socketFamily_ = 1;
      socketProtocol_ = 1;
      queryAddress_ = com.google.protobuf.ByteString.EMPTY;
      responseAddress_ = com.google.protobuf.ByteString.EMPTY;
      queryPort_ = 0;
      responsePort_ = 0;
      queryTimeSec_ = 0L;
      queryTimeNsec_ = 0;
      queryMessage_ = com.google.protobuf.ByteString.EMPTY;
      queryZone_ = com.google.protobuf.ByteString.EMPTY;
      responseTimeSec_ = 0L;
      responseTimeNsec_ = 0;
      responseMessage_ = com.google.protobuf.ByteString.EMPTY;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Message(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              org.graylog.plugins.dnstap.protos.DnstapOuterClass.Message.Type value = org.graylog.plugins.dnstap.protos.DnstapOuterClass.Message.Type.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                type_ = rawValue;
              }
              break;
            }
            case 16: {
              int rawValue = input.readEnum();
              org.graylog.plugins.dnstap.protos.DnstapOuterClass.SocketFamily value = org.graylog.plugins.dnstap.protos.DnstapOuterClass.SocketFamily.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(2, rawValue);
              } else {
                bitField0_ |= 0x00000002;
                socketFamily_ = rawValue;
              }
              break;
            }
            case 24: {
              int rawValue = input.readEnum();
              org.graylog.plugins.dnstap.protos.DnstapOuterClass.SocketProtocol value = org.graylog.plugins.dnstap.protos.DnstapOuterClass.SocketProtocol.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(3, rawValue);
              } else {
                bitField0_ |= 0x00000004;
                socketProtocol_ = rawValue;
              }
              break;
            }
            case 34: {
              bitField0_ |= 0x00000008;
              queryAddress_ = input.readBytes();
              break;
            }
            case 42: {
              bitField0_ |= 0x00000010;
              responseAddress_ = input.readBytes();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              queryPort_ = input.readUInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              responsePort_ = input.readUInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000080;
              queryTimeSec_ = input.readUInt64();
              break;
            }
            case 77: {
              bitField0_ |= 0x00000100;
              queryTimeNsec_ = input.readFixed32();
              break;
            }
            case 82: {
              bitField0_ |= 0x00000200;
              queryMessage_ = input.readBytes();
              break;
            }
            case 90: {
              bitField0_ |= 0x00000400;
              queryZone_ = input.readBytes();
              break;
            }
            case 96: {
              bitField0_ |= 0x00000800;
              responseTimeSec_ = input.readUInt64();
              break;
            }
            case 109: {
              bitField0_ |= 0x00001000;
              responseTimeNsec_ = input.readFixed32();
              break;
            }
            case 114: {
              bitField0_ |= 0x00002000;
              responseMessage_ = input.readBytes();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.graylog.plugins.dnstap.protos.DnstapOuterClass.internal_static_dnstap_Message_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.graylog.plugins.dnstap.protos.DnstapOuterClass.internal_static_dnstap_Message_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.graylog.plugins.dnstap.protos.DnstapOuterClass.Message.class, org.graylog.plugins.dnstap.protos.DnstapOuterClass.Message.Builder.class);
    }

    /**
     * Protobuf enum {@code dnstap.Message.Type}
     */
    public enum Type
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <pre>
       * AUTH_QUERY is a DNS query message received from a resolver by an
       * authoritative name server, from the perspective of the authorative
       * name server.
       * </pre>
       *
       * <code>AUTH_QUERY = 1;</code>
       */
      AUTH_QUERY(1),
      /**
       * <pre>
       * AUTH_RESPONSE is a DNS response message sent from an authoritative
       * name server to a resolver, from the perspective of the authoritative
       * name server.
       * </pre>
       *
       * <code>AUTH_RESPONSE = 2;</code>
       */
      AUTH_RESPONSE(2),
      /**
       * <pre>
       * RESOLVER_QUERY is a DNS query message sent from a resolver to an
       * authoritative name server, from the perspective of the resolver.
       * Resolvers typically clear the RD (recursion desired) bit when
       * sending queries.
       * </pre>
       *
       * <code>RESOLVER_QUERY = 3;</code>
       */
      RESOLVER_QUERY(3),
      /**
       * <pre>
       * RESOLVER_RESPONSE is a DNS response message received from an
       * authoritative name server by a resolver, from the perspective of
       * the resolver.
       * </pre>
       *
       * <code>RESOLVER_RESPONSE = 4;</code>
       */
      RESOLVER_RESPONSE(4),
      /**
       * <pre>
       * CLIENT_QUERY is a DNS query message sent from a client to a DNS
       * server which is expected to perform further recursion, from the
       * perspective of the DNS server. The client may be a stub resolver or
       * forwarder or some other type of software which typically sets the RD
       * (recursion desired) bit when querying the DNS server. The DNS server
       * may be a simple forwarding proxy or it may be a full recursive
       * resolver.
       * </pre>
       *
       * <code>CLIENT_QUERY = 5;</code>
       */
      CLIENT_QUERY(5),
      /**
       * <pre>
       * CLIENT_RESPONSE is a DNS response message sent from a DNS server to
       * a client, from the perspective of the DNS server. The DNS server
       * typically sets the RA (recursion available) bit when responding.
       * </pre>
       *
       * <code>CLIENT_RESPONSE = 6;</code>
       */
      CLIENT_RESPONSE(6),
      /**
       * <pre>
       * FORWARDER_QUERY is a DNS query message sent from a downstream DNS
       * server to an upstream DNS server which is expected to perform
       * further recursion, from the perspective of the downstream DNS
       * server.
       * </pre>
       *
       * <code>FORWARDER_QUERY = 7;</code>
       */
      FORWARDER_QUERY(7),
      /**
       * <pre>
       * FORWARDER_RESPONSE is a DNS response message sent from an upstream
       * DNS server performing recursion to a downstream DNS server, from the
       * perspective of the downstream DNS server.
       * </pre>
       *
       * <code>FORWARDER_RESPONSE = 8;</code>
       */
      FORWARDER_RESPONSE(8),
      /**
       * <pre>
       * STUB_QUERY is a DNS query message sent from a stub resolver to a DNS
       * server, from the perspective of the stub resolver.
       * </pre>
       *
       * <code>STUB_QUERY = 9;</code>
       */
      STUB_QUERY(9),
      /**
       * <pre>
       * STUB_RESPONSE is a DNS response message sent from a DNS server to a
       * stub resolver, from the perspective of the stub resolver.
       * </pre>
       *
       * <code>STUB_RESPONSE = 10;</code>
       */
      STUB_RESPONSE(10),
      /**
       * <pre>
       * TOOL_QUERY is a DNS query message sent from a DNS software tool to a
       * DNS server, from the perspective of the tool.
       * </pre>
       *
       * <code>TOOL_QUERY = 11;</code>
       */
      TOOL_QUERY(11),
      /**
       * <pre>
       * TOOL_RESPONSE is a DNS response message received by a DNS software
       * tool from a DNS server, from the perspective of the tool.
       * </pre>
       *
       * <code>TOOL_RESPONSE = 12;</code>
       */
      TOOL_RESPONSE(12),
      ;

      /**
       * <pre>
       * AUTH_QUERY is a DNS query message received from a resolver by an
       * authoritative name server, from the perspective of the authorative
       * name server.
       * </pre>
       *
       * <code>AUTH_QUERY = 1;</code>
       */
      public static final int AUTH_QUERY_VALUE = 1;
      /**
       * <pre>
       * AUTH_RESPONSE is a DNS response message sent from an authoritative
       * name server to a resolver, from the perspective of the authoritative
       * name server.
       * </pre>
       *
       * <code>AUTH_RESPONSE = 2;</code>
       */
      public static final int AUTH_RESPONSE_VALUE = 2;
      /**
       * <pre>
       * RESOLVER_QUERY is a DNS query message sent from a resolver to an
       * authoritative name server, from the perspective of the resolver.
       * Resolvers typically clear the RD (recursion desired) bit when
       * sending queries.
       * </pre>
       *
       * <code>RESOLVER_QUERY = 3;</code>
       */
      public static final int RESOLVER_QUERY_VALUE = 3;
      /**
       * <pre>
       * RESOLVER_RESPONSE is a DNS response message received from an
       * authoritative name server by a resolver, from the perspective of
       * the resolver.
       * </pre>
       *
       * <code>RESOLVER_RESPONSE = 4;</code>
       */
      public static final int RESOLVER_RESPONSE_VALUE = 4;
      /**
       * <pre>
       * CLIENT_QUERY is a DNS query message sent from a client to a DNS
       * server which is expected to perform further recursion, from the
       * perspective of the DNS server. The client may be a stub resolver or
       * forwarder or some other type of software which typically sets the RD
       * (recursion desired) bit when querying the DNS server. The DNS server
       * may be a simple forwarding proxy or it may be a full recursive
       * resolver.
       * </pre>
       *
       * <code>CLIENT_QUERY = 5;</code>
       */
      public static final int CLIENT_QUERY_VALUE = 5;
      /**
       * <pre>
       * CLIENT_RESPONSE is a DNS response message sent from a DNS server to
       * a client, from the perspective of the DNS server. The DNS server
       * typically sets the RA (recursion available) bit when responding.
       * </pre>
       *
       * <code>CLIENT_RESPONSE = 6;</code>
       */
      public static final int CLIENT_RESPONSE_VALUE = 6;
      /**
       * <pre>
       * FORWARDER_QUERY is a DNS query message sent from a downstream DNS
       * server to an upstream DNS server which is expected to perform
       * further recursion, from the perspective of the downstream DNS
       * server.
       * </pre>
       *
       * <code>FORWARDER_QUERY = 7;</code>
       */
      public static final int FORWARDER_QUERY_VALUE = 7;
      /**
       * <pre>
       * FORWARDER_RESPONSE is a DNS response message sent from an upstream
       * DNS server performing recursion to a downstream DNS server, from the
       * perspective of the downstream DNS server.
       * </pre>
       *
       * <code>FORWARDER_RESPONSE = 8;</code>
       */
      public static final int FORWARDER_RESPONSE_VALUE = 8;
      /**
       * <pre>
       * STUB_QUERY is a DNS query message sent from a stub resolver to a DNS
       * server, from the perspective of the stub resolver.
       * </pre>
       *
       * <code>STUB_QUERY = 9;</code>
       */
      public static final int STUB_QUERY_VALUE = 9;
      /**
       * <pre>
       * STUB_RESPONSE is a DNS response message sent from a DNS server to a
       * stub resolver, from the perspective of the stub resolver.
       * </pre>
       *
       * <code>STUB_RESPONSE = 10;</code>
       */
      public static final int STUB_RESPONSE_VALUE = 10;
      /**
       * <pre>
       * TOOL_QUERY is a DNS query message sent from a DNS software tool to a
       * DNS server, from the perspective of the tool.
       * </pre>
       *
       * <code>TOOL_QUERY = 11;</code>
       */
      public static final int TOOL_QUERY_VALUE = 11;
      /**
       * <pre>
       * TOOL_RESPONSE is a DNS response message received by a DNS software
       * tool from a DNS server, from the perspective of the tool.
       * </pre>
       *
       * <code>TOOL_RESPONSE = 12;</code>
       */
      public static final int TOOL_RESPONSE_VALUE = 12;


      public final int getNumber() {
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static Type valueOf(int value) {
        return forNumber(value);
      }

      public static Type forNumber(int value) {
        switch (value) {
          case 1: return AUTH_QUERY;
          case 2: return AUTH_RESPONSE;
          case 3: return RESOLVER_QUERY;
          case 4: return RESOLVER_RESPONSE;
          case 5: return CLIENT_QUERY;
          case 6: return CLIENT_RESPONSE;
          case 7: return FORWARDER_QUERY;
          case 8: return FORWARDER_RESPONSE;
          case 9: return STUB_QUERY;
          case 10: return STUB_RESPONSE;
          case 11: return TOOL_QUERY;
          case 12: return TOOL_RESPONSE;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<Type>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          Type> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Type>() {
              public Type findValueByNumber(int number) {
                return Type.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return org.graylog.plugins.dnstap.protos.DnstapOuterClass.Message.getDescriptor().getEnumTypes().get(0);
      }

      private static final Type[] VALUES = values();

      public static Type valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private Type(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:dnstap.Message.Type)
    }

    private int bitField0_;
    public static final int TYPE_FIELD_NUMBER = 1;
    private int type_;
    /**
     * <pre>
     * One of the Type values described above.
     * </pre>
     *
     * <code>required .dnstap.Message.Type type = 1;</code>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     * One of the Type values described above.
     * </pre>
     *
     * <code>required .dnstap.Message.Type type = 1;</code>
     */
    public org.graylog.plugins.dnstap.protos.DnstapOuterClass.Message.Type getType() {
      org.graylog.plugins.dnstap.protos.DnstapOuterClass.Message.Type result = org.graylog.plugins.dnstap.protos.DnstapOuterClass.Message.Type.valueOf(type_);
      return result == null ? org.graylog.plugins.dnstap.protos.DnstapOuterClass.Message.Type.AUTH_QUERY : result;
    }

    public static final int SOCKET_FAMILY_FIELD_NUMBER = 2;
    private int socketFamily_;
    /**
     * <pre>
     * One of the SocketFamily values described above.
     * </pre>
     *
     * <code>optional .dnstap.SocketFamily socket_family = 2;</code>
     */
    public boolean hasSocketFamily() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     * One of the SocketFamily values described above.
     * </pre>
     *
     * <code>optional .dnstap.SocketFamily socket_family = 2;</code>
     */
    public org.graylog.plugins.dnstap.protos.DnstapOuterClass.SocketFamily getSocketFamily() {
      org.graylog.plugins.dnstap.protos.DnstapOuterClass.SocketFamily result = org.graylog.plugins.dnstap.protos.DnstapOuterClass.SocketFamily.valueOf(socketFamily_);
      return result == null ? org.graylog.plugins.dnstap.protos.DnstapOuterClass.SocketFamily.INET : result;
    }

    public static final int SOCKET_PROTOCOL_FIELD_NUMBER = 3;
    private int socketProtocol_;
    /**
     * <pre>
     * One of the SocketProtocol values described above.
     * </pre>
     *
     * <code>optional .dnstap.SocketProtocol socket_protocol = 3;</code>
     */
    public boolean hasSocketProtocol() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <pre>
     * One of the SocketProtocol values described above.
     * </pre>
     *
     * <code>optional .dnstap.SocketProtocol socket_protocol = 3;</code>
     */
    public org.graylog.plugins.dnstap.protos.DnstapOuterClass.SocketProtocol getSocketProtocol() {
      org.graylog.plugins.dnstap.protos.DnstapOuterClass.SocketProtocol result = org.graylog.plugins.dnstap.protos.DnstapOuterClass.SocketProtocol.valueOf(socketProtocol_);
      return result == null ? org.graylog.plugins.dnstap.protos.DnstapOuterClass.SocketProtocol.UDP : result;
    }

    public static final int QUERY_ADDRESS_FIELD_NUMBER = 4;
    private com.google.protobuf.ByteString queryAddress_;
    /**
     * <pre>
     * The network address of the message initiator.
     * For SocketFamily INET, this field is 4 octets (IPv4 address).
     * For SocketFamily INET6, this field is 16 octets (IPv6 address).
     * </pre>
     *
     * <code>optional bytes query_address = 4;</code>
     */
    public boolean hasQueryAddress() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <pre>
     * The network address of the message initiator.
     * For SocketFamily INET, this field is 4 octets (IPv4 address).
     * For SocketFamily INET6, this field is 16 octets (IPv6 address).
     * </pre>
     *
     * <code>optional bytes query_address = 4;</code>
     */
    public com.google.protobuf.ByteString getQueryAddress() {
      return queryAddress_;
    }

    public static final int RESPONSE_ADDRESS_FIELD_NUMBER = 5;
    private com.google.protobuf.ByteString responseAddress_;
    /**
     * <pre>
     * The network address of the message responder.
     * For SocketFamily INET, this field is 4 octets (IPv4 address).
     * For SocketFamily INET6, this field is 16 octets (IPv6 address).
     * </pre>
     *
     * <code>optional bytes response_address = 5;</code>
     */
    public boolean hasResponseAddress() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <pre>
     * The network address of the message responder.
     * For SocketFamily INET, this field is 4 octets (IPv4 address).
     * For SocketFamily INET6, this field is 16 octets (IPv6 address).
     * </pre>
     *
     * <code>optional bytes response_address = 5;</code>
     */
    public com.google.protobuf.ByteString getResponseAddress() {
      return responseAddress_;
    }

    public static final int QUERY_PORT_FIELD_NUMBER = 6;
    private int queryPort_;
    /**
     * <pre>
     * The transport port of the message initiator.
     * This is a 16-bit UDP or TCP port number, depending on SocketProtocol.
     * </pre>
     *
     * <code>optional uint32 query_port = 6;</code>
     */
    public boolean hasQueryPort() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <pre>
     * The transport port of the message initiator.
     * This is a 16-bit UDP or TCP port number, depending on SocketProtocol.
     * </pre>
     *
     * <code>optional uint32 query_port = 6;</code>
     */
    public int getQueryPort() {
      return queryPort_;
    }

    public static final int RESPONSE_PORT_FIELD_NUMBER = 7;
    private int responsePort_;
    /**
     * <pre>
     * The transport port of the message responder.
     * This is a 16-bit UDP or TCP port number, depending on SocketProtocol.
     * </pre>
     *
     * <code>optional uint32 response_port = 7;</code>
     */
    public boolean hasResponsePort() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <pre>
     * The transport port of the message responder.
     * This is a 16-bit UDP or TCP port number, depending on SocketProtocol.
     * </pre>
     *
     * <code>optional uint32 response_port = 7;</code>
     */
    public int getResponsePort() {
      return responsePort_;
    }

    public static final int QUERY_TIME_SEC_FIELD_NUMBER = 8;
    private long queryTimeSec_;
    /**
     * <pre>
     * The time at which the DNS query message was sent or received, depending
     * on whether this is an AUTH_QUERY, RESOLVER_QUERY, or CLIENT_QUERY.
     * This is the number of seconds since the UNIX epoch.
     * </pre>
     *
     * <code>optional uint64 query_time_sec = 8;</code>
     */
    public boolean hasQueryTimeSec() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <pre>
     * The time at which the DNS query message was sent or received, depending
     * on whether this is an AUTH_QUERY, RESOLVER_QUERY, or CLIENT_QUERY.
     * This is the number of seconds since the UNIX epoch.
     * </pre>
     *
     * <code>optional uint64 query_time_sec = 8;</code>
     */
    public long getQueryTimeSec() {
      return queryTimeSec_;
    }

    public static final int QUERY_TIME_NSEC_FIELD_NUMBER = 9;
    private int queryTimeNsec_;
    /**
     * <pre>
     * The time at which the DNS query message was sent or received.
     * This is the seconds fraction, expressed as a count of nanoseconds.
     * </pre>
     *
     * <code>optional fixed32 query_time_nsec = 9;</code>
     */
    public boolean hasQueryTimeNsec() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <pre>
     * The time at which the DNS query message was sent or received.
     * This is the seconds fraction, expressed as a count of nanoseconds.
     * </pre>
     *
     * <code>optional fixed32 query_time_nsec = 9;</code>
     */
    public int getQueryTimeNsec() {
      return queryTimeNsec_;
    }

    public static final int QUERY_MESSAGE_FIELD_NUMBER = 10;
    private com.google.protobuf.ByteString queryMessage_;
    /**
     * <pre>
     * The initiator's original wire-format DNS query message, verbatim.
     * </pre>
     *
     * <code>optional bytes query_message = 10;</code>
     */
    public boolean hasQueryMessage() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <pre>
     * The initiator's original wire-format DNS query message, verbatim.
     * </pre>
     *
     * <code>optional bytes query_message = 10;</code>
     */
    public com.google.protobuf.ByteString getQueryMessage() {
      return queryMessage_;
    }

    public static final int QUERY_ZONE_FIELD_NUMBER = 11;
    private com.google.protobuf.ByteString queryZone_;
    /**
     * <pre>
     * The "zone" or "bailiwick" pertaining to the DNS query message.
     * This is a wire-format DNS domain name.
     * </pre>
     *
     * <code>optional bytes query_zone = 11;</code>
     */
    public boolean hasQueryZone() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <pre>
     * The "zone" or "bailiwick" pertaining to the DNS query message.
     * This is a wire-format DNS domain name.
     * </pre>
     *
     * <code>optional bytes query_zone = 11;</code>
     */
    public com.google.protobuf.ByteString getQueryZone() {
      return queryZone_;
    }

    public static final int RESPONSE_TIME_SEC_FIELD_NUMBER = 12;
    private long responseTimeSec_;
    /**
     * <pre>
     * The time at which the DNS response message was sent or received,
     * depending on whether this is an AUTH_RESPONSE, RESOLVER_RESPONSE, or
     * CLIENT_RESPONSE.
     * This is the number of seconds since the UNIX epoch.
     * </pre>
     *
     * <code>optional uint64 response_time_sec = 12;</code>
     */
    public boolean hasResponseTimeSec() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <pre>
     * The time at which the DNS response message was sent or received,
     * depending on whether this is an AUTH_RESPONSE, RESOLVER_RESPONSE, or
     * CLIENT_RESPONSE.
     * This is the number of seconds since the UNIX epoch.
     * </pre>
     *
     * <code>optional uint64 response_time_sec = 12;</code>
     */
    public long getResponseTimeSec() {
      return responseTimeSec_;
    }

    public static final int RESPONSE_TIME_NSEC_FIELD_NUMBER = 13;
    private int responseTimeNsec_;
    /**
     * <pre>
     * The time at which the DNS response message was sent or received.
     * This is the seconds fraction, expressed as a count of nanoseconds.
     * </pre>
     *
     * <code>optional fixed32 response_time_nsec = 13;</code>
     */
    public boolean hasResponseTimeNsec() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <pre>
     * The time at which the DNS response message was sent or received.
     * This is the seconds fraction, expressed as a count of nanoseconds.
     * </pre>
     *
     * <code>optional fixed32 response_time_nsec = 13;</code>
     */
    public int getResponseTimeNsec() {
      return responseTimeNsec_;
    }

    public static final int RESPONSE_MESSAGE_FIELD_NUMBER = 14;
    private com.google.protobuf.ByteString responseMessage_;
    /**
     * <pre>
     * The responder's original wire-format DNS response message, verbatim.
     * </pre>
     *
     * <code>optional bytes response_message = 14;</code>
     */
    public boolean hasResponseMessage() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <pre>
     * The responder's original wire-format DNS response message, verbatim.
     * </pre>
     *
     * <code>optional bytes response_message = 14;</code>
     */
    public com.google.protobuf.ByteString getResponseMessage() {
      return responseMessage_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, type_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeEnum(2, socketFamily_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeEnum(3, socketProtocol_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBytes(4, queryAddress_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeBytes(5, responseAddress_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeUInt32(6, queryPort_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeUInt32(7, responsePort_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeUInt64(8, queryTimeSec_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeFixed32(9, queryTimeNsec_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeBytes(10, queryMessage_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeBytes(11, queryZone_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeUInt64(12, responseTimeSec_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeFixed32(13, responseTimeNsec_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeBytes(14, responseMessage_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, type_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, socketFamily_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(3, socketProtocol_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(4, queryAddress_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(5, responseAddress_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(6, queryPort_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(7, responsePort_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(8, queryTimeSec_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(9, queryTimeNsec_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(10, queryMessage_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(11, queryZone_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(12, responseTimeSec_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(13, responseTimeNsec_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(14, responseMessage_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.graylog.plugins.dnstap.protos.DnstapOuterClass.Message)) {
        return super.equals(obj);
      }
      org.graylog.plugins.dnstap.protos.DnstapOuterClass.Message other = (org.graylog.plugins.dnstap.protos.DnstapOuterClass.Message) obj;

      boolean result = true;
      result = result && (hasType() == other.hasType());
      if (hasType()) {
        result = result && type_ == other.type_;
      }
      result = result && (hasSocketFamily() == other.hasSocketFamily());
      if (hasSocketFamily()) {
        result = result && socketFamily_ == other.socketFamily_;
      }
      result = result && (hasSocketProtocol() == other.hasSocketProtocol());
      if (hasSocketProtocol()) {
        result = result && socketProtocol_ == other.socketProtocol_;
      }
      result = result && (hasQueryAddress() == other.hasQueryAddress());
      if (hasQueryAddress()) {
        result = result && getQueryAddress()
            .equals(other.getQueryAddress());
      }
      result = result && (hasResponseAddress() == other.hasResponseAddress());
      if (hasResponseAddress()) {
        result = result && getResponseAddress()
            .equals(other.getResponseAddress());
      }
      result = result && (hasQueryPort() == other.hasQueryPort());
      if (hasQueryPort()) {
        result = result && (getQueryPort()
            == other.getQueryPort());
      }
      result = result && (hasResponsePort() == other.hasResponsePort());
      if (hasResponsePort()) {
        result = result && (getResponsePort()
            == other.getResponsePort());
      }
      result = result && (hasQueryTimeSec() == other.hasQueryTimeSec());
      if (hasQueryTimeSec()) {
        result = result && (getQueryTimeSec()
            == other.getQueryTimeSec());
      }
      result = result && (hasQueryTimeNsec() == other.hasQueryTimeNsec());
      if (hasQueryTimeNsec()) {
        result = result && (getQueryTimeNsec()
            == other.getQueryTimeNsec());
      }
      result = result && (hasQueryMessage() == other.hasQueryMessage());
      if (hasQueryMessage()) {
        result = result && getQueryMessage()
            .equals(other.getQueryMessage());
      }
      result = result && (hasQueryZone() == other.hasQueryZone());
      if (hasQueryZone()) {
        result = result && getQueryZone()
            .equals(other.getQueryZone());
      }
      result = result && (hasResponseTimeSec() == other.hasResponseTimeSec());
      if (hasResponseTimeSec()) {
        result = result && (getResponseTimeSec()
            == other.getResponseTimeSec());
      }
      result = result && (hasResponseTimeNsec() == other.hasResponseTimeNsec());
      if (hasResponseTimeNsec()) {
        result = result && (getResponseTimeNsec()
            == other.getResponseTimeNsec());
      }
      result = result && (hasResponseMessage() == other.hasResponseMessage());
      if (hasResponseMessage()) {
        result = result && getResponseMessage()
            .equals(other.getResponseMessage());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (hasType()) {
        hash = (37 * hash) + TYPE_FIELD_NUMBER;
        hash = (53 * hash) + type_;
      }
      if (hasSocketFamily()) {
        hash = (37 * hash) + SOCKET_FAMILY_FIELD_NUMBER;
        hash = (53 * hash) + socketFamily_;
      }
      if (hasSocketProtocol()) {
        hash = (37 * hash) + SOCKET_PROTOCOL_FIELD_NUMBER;
        hash = (53 * hash) + socketProtocol_;
      }
      if (hasQueryAddress()) {
        hash = (37 * hash) + QUERY_ADDRESS_FIELD_NUMBER;
        hash = (53 * hash) + getQueryAddress().hashCode();
      }
      if (hasResponseAddress()) {
        hash = (37 * hash) + RESPONSE_ADDRESS_FIELD_NUMBER;
        hash = (53 * hash) + getResponseAddress().hashCode();
      }
      if (hasQueryPort()) {
        hash = (37 * hash) + QUERY_PORT_FIELD_NUMBER;
        hash = (53 * hash) + getQueryPort();
      }
      if (hasResponsePort()) {
        hash = (37 * hash) + RESPONSE_PORT_FIELD_NUMBER;
        hash = (53 * hash) + getResponsePort();
      }
      if (hasQueryTimeSec()) {
        hash = (37 * hash) + QUERY_TIME_SEC_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getQueryTimeSec());
      }
      if (hasQueryTimeNsec()) {
        hash = (37 * hash) + QUERY_TIME_NSEC_FIELD_NUMBER;
        hash = (53 * hash) + getQueryTimeNsec();
      }
      if (hasQueryMessage()) {
        hash = (37 * hash) + QUERY_MESSAGE_FIELD_NUMBER;
        hash = (53 * hash) + getQueryMessage().hashCode();
      }
      if (hasQueryZone()) {
        hash = (37 * hash) + QUERY_ZONE_FIELD_NUMBER;
        hash = (53 * hash) + getQueryZone().hashCode();
      }
      if (hasResponseTimeSec()) {
        hash = (37 * hash) + RESPONSE_TIME_SEC_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getResponseTimeSec());
      }
      if (hasResponseTimeNsec()) {
        hash = (37 * hash) + RESPONSE_TIME_NSEC_FIELD_NUMBER;
        hash = (53 * hash) + getResponseTimeNsec();
      }
      if (hasResponseMessage()) {
        hash = (37 * hash) + RESPONSE_MESSAGE_FIELD_NUMBER;
        hash = (53 * hash) + getResponseMessage().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.graylog.plugins.dnstap.protos.DnstapOuterClass.Message parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.graylog.plugins.dnstap.protos.DnstapOuterClass.Message parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.graylog.plugins.dnstap.protos.DnstapOuterClass.Message parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.graylog.plugins.dnstap.protos.DnstapOuterClass.Message parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.graylog.plugins.dnstap.protos.DnstapOuterClass.Message parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.graylog.plugins.dnstap.protos.DnstapOuterClass.Message parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.graylog.plugins.dnstap.protos.DnstapOuterClass.Message parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.graylog.plugins.dnstap.protos.DnstapOuterClass.Message parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.graylog.plugins.dnstap.protos.DnstapOuterClass.Message parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.graylog.plugins.dnstap.protos.DnstapOuterClass.Message parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.graylog.plugins.dnstap.protos.DnstapOuterClass.Message prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Message: a wire-format (RFC 1035 section 4) DNS message and associated
     * metadata. Applications generating "Message" payloads should follow
     * certain requirements based on the MessageType, see below.
     * </pre>
     *
     * Protobuf type {@code dnstap.Message}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:dnstap.Message)
        org.graylog.plugins.dnstap.protos.DnstapOuterClass.MessageOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.graylog.plugins.dnstap.protos.DnstapOuterClass.internal_static_dnstap_Message_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.graylog.plugins.dnstap.protos.DnstapOuterClass.internal_static_dnstap_Message_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.graylog.plugins.dnstap.protos.DnstapOuterClass.Message.class, org.graylog.plugins.dnstap.protos.DnstapOuterClass.Message.Builder.class);
      }

      // Construct using org.graylog.plugins.dnstap.protos.DnstapOuterClass.Message.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        type_ = 1;
        bitField0_ = (bitField0_ & ~0x00000001);
        socketFamily_ = 1;
        bitField0_ = (bitField0_ & ~0x00000002);
        socketProtocol_ = 1;
        bitField0_ = (bitField0_ & ~0x00000004);
        queryAddress_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000008);
        responseAddress_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000010);
        queryPort_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        responsePort_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        queryTimeSec_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000080);
        queryTimeNsec_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        queryMessage_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000200);
        queryZone_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000400);
        responseTimeSec_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000800);
        responseTimeNsec_ = 0;
        bitField0_ = (bitField0_ & ~0x00001000);
        responseMessage_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00002000);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.graylog.plugins.dnstap.protos.DnstapOuterClass.internal_static_dnstap_Message_descriptor;
      }

      public org.graylog.plugins.dnstap.protos.DnstapOuterClass.Message getDefaultInstanceForType() {
        return org.graylog.plugins.dnstap.protos.DnstapOuterClass.Message.getDefaultInstance();
      }

      public org.graylog.plugins.dnstap.protos.DnstapOuterClass.Message build() {
        org.graylog.plugins.dnstap.protos.DnstapOuterClass.Message result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.graylog.plugins.dnstap.protos.DnstapOuterClass.Message buildPartial() {
        org.graylog.plugins.dnstap.protos.DnstapOuterClass.Message result = new org.graylog.plugins.dnstap.protos.DnstapOuterClass.Message(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.type_ = type_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.socketFamily_ = socketFamily_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.socketProtocol_ = socketProtocol_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.queryAddress_ = queryAddress_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.responseAddress_ = responseAddress_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.queryPort_ = queryPort_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.responsePort_ = responsePort_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.queryTimeSec_ = queryTimeSec_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.queryTimeNsec_ = queryTimeNsec_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.queryMessage_ = queryMessage_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.queryZone_ = queryZone_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.responseTimeSec_ = responseTimeSec_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.responseTimeNsec_ = responseTimeNsec_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00002000;
        }
        result.responseMessage_ = responseMessage_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.graylog.plugins.dnstap.protos.DnstapOuterClass.Message) {
          return mergeFrom((org.graylog.plugins.dnstap.protos.DnstapOuterClass.Message)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.graylog.plugins.dnstap.protos.DnstapOuterClass.Message other) {
        if (other == org.graylog.plugins.dnstap.protos.DnstapOuterClass.Message.getDefaultInstance()) return this;
        if (other.hasType()) {
          setType(other.getType());
        }
        if (other.hasSocketFamily()) {
          setSocketFamily(other.getSocketFamily());
        }
        if (other.hasSocketProtocol()) {
          setSocketProtocol(other.getSocketProtocol());
        }
        if (other.hasQueryAddress()) {
          setQueryAddress(other.getQueryAddress());
        }
        if (other.hasResponseAddress()) {
          setResponseAddress(other.getResponseAddress());
        }
        if (other.hasQueryPort()) {
          setQueryPort(other.getQueryPort());
        }
        if (other.hasResponsePort()) {
          setResponsePort(other.getResponsePort());
        }
        if (other.hasQueryTimeSec()) {
          setQueryTimeSec(other.getQueryTimeSec());
        }
        if (other.hasQueryTimeNsec()) {
          setQueryTimeNsec(other.getQueryTimeNsec());
        }
        if (other.hasQueryMessage()) {
          setQueryMessage(other.getQueryMessage());
        }
        if (other.hasQueryZone()) {
          setQueryZone(other.getQueryZone());
        }
        if (other.hasResponseTimeSec()) {
          setResponseTimeSec(other.getResponseTimeSec());
        }
        if (other.hasResponseTimeNsec()) {
          setResponseTimeNsec(other.getResponseTimeNsec());
        }
        if (other.hasResponseMessage()) {
          setResponseMessage(other.getResponseMessage());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        if (!hasType()) {
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.graylog.plugins.dnstap.protos.DnstapOuterClass.Message parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.graylog.plugins.dnstap.protos.DnstapOuterClass.Message) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int type_ = 1;
      /**
       * <pre>
       * One of the Type values described above.
       * </pre>
       *
       * <code>required .dnstap.Message.Type type = 1;</code>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       * One of the Type values described above.
       * </pre>
       *
       * <code>required .dnstap.Message.Type type = 1;</code>
       */
      public org.graylog.plugins.dnstap.protos.DnstapOuterClass.Message.Type getType() {
        org.graylog.plugins.dnstap.protos.DnstapOuterClass.Message.Type result = org.graylog.plugins.dnstap.protos.DnstapOuterClass.Message.Type.valueOf(type_);
        return result == null ? org.graylog.plugins.dnstap.protos.DnstapOuterClass.Message.Type.AUTH_QUERY : result;
      }
      /**
       * <pre>
       * One of the Type values described above.
       * </pre>
       *
       * <code>required .dnstap.Message.Type type = 1;</code>
       */
      public Builder setType(org.graylog.plugins.dnstap.protos.DnstapOuterClass.Message.Type value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        type_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * One of the Type values described above.
       * </pre>
       *
       * <code>required .dnstap.Message.Type type = 1;</code>
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = 1;
        onChanged();
        return this;
      }

      private int socketFamily_ = 1;
      /**
       * <pre>
       * One of the SocketFamily values described above.
       * </pre>
       *
       * <code>optional .dnstap.SocketFamily socket_family = 2;</code>
       */
      public boolean hasSocketFamily() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <pre>
       * One of the SocketFamily values described above.
       * </pre>
       *
       * <code>optional .dnstap.SocketFamily socket_family = 2;</code>
       */
      public org.graylog.plugins.dnstap.protos.DnstapOuterClass.SocketFamily getSocketFamily() {
        org.graylog.plugins.dnstap.protos.DnstapOuterClass.SocketFamily result = org.graylog.plugins.dnstap.protos.DnstapOuterClass.SocketFamily.valueOf(socketFamily_);
        return result == null ? org.graylog.plugins.dnstap.protos.DnstapOuterClass.SocketFamily.INET : result;
      }
      /**
       * <pre>
       * One of the SocketFamily values described above.
       * </pre>
       *
       * <code>optional .dnstap.SocketFamily socket_family = 2;</code>
       */
      public Builder setSocketFamily(org.graylog.plugins.dnstap.protos.DnstapOuterClass.SocketFamily value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000002;
        socketFamily_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * One of the SocketFamily values described above.
       * </pre>
       *
       * <code>optional .dnstap.SocketFamily socket_family = 2;</code>
       */
      public Builder clearSocketFamily() {
        bitField0_ = (bitField0_ & ~0x00000002);
        socketFamily_ = 1;
        onChanged();
        return this;
      }

      private int socketProtocol_ = 1;
      /**
       * <pre>
       * One of the SocketProtocol values described above.
       * </pre>
       *
       * <code>optional .dnstap.SocketProtocol socket_protocol = 3;</code>
       */
      public boolean hasSocketProtocol() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <pre>
       * One of the SocketProtocol values described above.
       * </pre>
       *
       * <code>optional .dnstap.SocketProtocol socket_protocol = 3;</code>
       */
      public org.graylog.plugins.dnstap.protos.DnstapOuterClass.SocketProtocol getSocketProtocol() {
        org.graylog.plugins.dnstap.protos.DnstapOuterClass.SocketProtocol result = org.graylog.plugins.dnstap.protos.DnstapOuterClass.SocketProtocol.valueOf(socketProtocol_);
        return result == null ? org.graylog.plugins.dnstap.protos.DnstapOuterClass.SocketProtocol.UDP : result;
      }
      /**
       * <pre>
       * One of the SocketProtocol values described above.
       * </pre>
       *
       * <code>optional .dnstap.SocketProtocol socket_protocol = 3;</code>
       */
      public Builder setSocketProtocol(org.graylog.plugins.dnstap.protos.DnstapOuterClass.SocketProtocol value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000004;
        socketProtocol_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * One of the SocketProtocol values described above.
       * </pre>
       *
       * <code>optional .dnstap.SocketProtocol socket_protocol = 3;</code>
       */
      public Builder clearSocketProtocol() {
        bitField0_ = (bitField0_ & ~0x00000004);
        socketProtocol_ = 1;
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString queryAddress_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * The network address of the message initiator.
       * For SocketFamily INET, this field is 4 octets (IPv4 address).
       * For SocketFamily INET6, this field is 16 octets (IPv6 address).
       * </pre>
       *
       * <code>optional bytes query_address = 4;</code>
       */
      public boolean hasQueryAddress() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <pre>
       * The network address of the message initiator.
       * For SocketFamily INET, this field is 4 octets (IPv4 address).
       * For SocketFamily INET6, this field is 16 octets (IPv6 address).
       * </pre>
       *
       * <code>optional bytes query_address = 4;</code>
       */
      public com.google.protobuf.ByteString getQueryAddress() {
        return queryAddress_;
      }
      /**
       * <pre>
       * The network address of the message initiator.
       * For SocketFamily INET, this field is 4 octets (IPv4 address).
       * For SocketFamily INET6, this field is 16 octets (IPv6 address).
       * </pre>
       *
       * <code>optional bytes query_address = 4;</code>
       */
      public Builder setQueryAddress(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        queryAddress_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The network address of the message initiator.
       * For SocketFamily INET, this field is 4 octets (IPv4 address).
       * For SocketFamily INET6, this field is 16 octets (IPv6 address).
       * </pre>
       *
       * <code>optional bytes query_address = 4;</code>
       */
      public Builder clearQueryAddress() {
        bitField0_ = (bitField0_ & ~0x00000008);
        queryAddress_ = getDefaultInstance().getQueryAddress();
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString responseAddress_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * The network address of the message responder.
       * For SocketFamily INET, this field is 4 octets (IPv4 address).
       * For SocketFamily INET6, this field is 16 octets (IPv6 address).
       * </pre>
       *
       * <code>optional bytes response_address = 5;</code>
       */
      public boolean hasResponseAddress() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <pre>
       * The network address of the message responder.
       * For SocketFamily INET, this field is 4 octets (IPv4 address).
       * For SocketFamily INET6, this field is 16 octets (IPv6 address).
       * </pre>
       *
       * <code>optional bytes response_address = 5;</code>
       */
      public com.google.protobuf.ByteString getResponseAddress() {
        return responseAddress_;
      }
      /**
       * <pre>
       * The network address of the message responder.
       * For SocketFamily INET, this field is 4 octets (IPv4 address).
       * For SocketFamily INET6, this field is 16 octets (IPv6 address).
       * </pre>
       *
       * <code>optional bytes response_address = 5;</code>
       */
      public Builder setResponseAddress(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        responseAddress_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The network address of the message responder.
       * For SocketFamily INET, this field is 4 octets (IPv4 address).
       * For SocketFamily INET6, this field is 16 octets (IPv6 address).
       * </pre>
       *
       * <code>optional bytes response_address = 5;</code>
       */
      public Builder clearResponseAddress() {
        bitField0_ = (bitField0_ & ~0x00000010);
        responseAddress_ = getDefaultInstance().getResponseAddress();
        onChanged();
        return this;
      }

      private int queryPort_ ;
      /**
       * <pre>
       * The transport port of the message initiator.
       * This is a 16-bit UDP or TCP port number, depending on SocketProtocol.
       * </pre>
       *
       * <code>optional uint32 query_port = 6;</code>
       */
      public boolean hasQueryPort() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <pre>
       * The transport port of the message initiator.
       * This is a 16-bit UDP or TCP port number, depending on SocketProtocol.
       * </pre>
       *
       * <code>optional uint32 query_port = 6;</code>
       */
      public int getQueryPort() {
        return queryPort_;
      }
      /**
       * <pre>
       * The transport port of the message initiator.
       * This is a 16-bit UDP or TCP port number, depending on SocketProtocol.
       * </pre>
       *
       * <code>optional uint32 query_port = 6;</code>
       */
      public Builder setQueryPort(int value) {
        bitField0_ |= 0x00000020;
        queryPort_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The transport port of the message initiator.
       * This is a 16-bit UDP or TCP port number, depending on SocketProtocol.
       * </pre>
       *
       * <code>optional uint32 query_port = 6;</code>
       */
      public Builder clearQueryPort() {
        bitField0_ = (bitField0_ & ~0x00000020);
        queryPort_ = 0;
        onChanged();
        return this;
      }

      private int responsePort_ ;
      /**
       * <pre>
       * The transport port of the message responder.
       * This is a 16-bit UDP or TCP port number, depending on SocketProtocol.
       * </pre>
       *
       * <code>optional uint32 response_port = 7;</code>
       */
      public boolean hasResponsePort() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <pre>
       * The transport port of the message responder.
       * This is a 16-bit UDP or TCP port number, depending on SocketProtocol.
       * </pre>
       *
       * <code>optional uint32 response_port = 7;</code>
       */
      public int getResponsePort() {
        return responsePort_;
      }
      /**
       * <pre>
       * The transport port of the message responder.
       * This is a 16-bit UDP or TCP port number, depending on SocketProtocol.
       * </pre>
       *
       * <code>optional uint32 response_port = 7;</code>
       */
      public Builder setResponsePort(int value) {
        bitField0_ |= 0x00000040;
        responsePort_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The transport port of the message responder.
       * This is a 16-bit UDP or TCP port number, depending on SocketProtocol.
       * </pre>
       *
       * <code>optional uint32 response_port = 7;</code>
       */
      public Builder clearResponsePort() {
        bitField0_ = (bitField0_ & ~0x00000040);
        responsePort_ = 0;
        onChanged();
        return this;
      }

      private long queryTimeSec_ ;
      /**
       * <pre>
       * The time at which the DNS query message was sent or received, depending
       * on whether this is an AUTH_QUERY, RESOLVER_QUERY, or CLIENT_QUERY.
       * This is the number of seconds since the UNIX epoch.
       * </pre>
       *
       * <code>optional uint64 query_time_sec = 8;</code>
       */
      public boolean hasQueryTimeSec() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <pre>
       * The time at which the DNS query message was sent or received, depending
       * on whether this is an AUTH_QUERY, RESOLVER_QUERY, or CLIENT_QUERY.
       * This is the number of seconds since the UNIX epoch.
       * </pre>
       *
       * <code>optional uint64 query_time_sec = 8;</code>
       */
      public long getQueryTimeSec() {
        return queryTimeSec_;
      }
      /**
       * <pre>
       * The time at which the DNS query message was sent or received, depending
       * on whether this is an AUTH_QUERY, RESOLVER_QUERY, or CLIENT_QUERY.
       * This is the number of seconds since the UNIX epoch.
       * </pre>
       *
       * <code>optional uint64 query_time_sec = 8;</code>
       */
      public Builder setQueryTimeSec(long value) {
        bitField0_ |= 0x00000080;
        queryTimeSec_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The time at which the DNS query message was sent or received, depending
       * on whether this is an AUTH_QUERY, RESOLVER_QUERY, or CLIENT_QUERY.
       * This is the number of seconds since the UNIX epoch.
       * </pre>
       *
       * <code>optional uint64 query_time_sec = 8;</code>
       */
      public Builder clearQueryTimeSec() {
        bitField0_ = (bitField0_ & ~0x00000080);
        queryTimeSec_ = 0L;
        onChanged();
        return this;
      }

      private int queryTimeNsec_ ;
      /**
       * <pre>
       * The time at which the DNS query message was sent or received.
       * This is the seconds fraction, expressed as a count of nanoseconds.
       * </pre>
       *
       * <code>optional fixed32 query_time_nsec = 9;</code>
       */
      public boolean hasQueryTimeNsec() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <pre>
       * The time at which the DNS query message was sent or received.
       * This is the seconds fraction, expressed as a count of nanoseconds.
       * </pre>
       *
       * <code>optional fixed32 query_time_nsec = 9;</code>
       */
      public int getQueryTimeNsec() {
        return queryTimeNsec_;
      }
      /**
       * <pre>
       * The time at which the DNS query message was sent or received.
       * This is the seconds fraction, expressed as a count of nanoseconds.
       * </pre>
       *
       * <code>optional fixed32 query_time_nsec = 9;</code>
       */
      public Builder setQueryTimeNsec(int value) {
        bitField0_ |= 0x00000100;
        queryTimeNsec_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The time at which the DNS query message was sent or received.
       * This is the seconds fraction, expressed as a count of nanoseconds.
       * </pre>
       *
       * <code>optional fixed32 query_time_nsec = 9;</code>
       */
      public Builder clearQueryTimeNsec() {
        bitField0_ = (bitField0_ & ~0x00000100);
        queryTimeNsec_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString queryMessage_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * The initiator's original wire-format DNS query message, verbatim.
       * </pre>
       *
       * <code>optional bytes query_message = 10;</code>
       */
      public boolean hasQueryMessage() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <pre>
       * The initiator's original wire-format DNS query message, verbatim.
       * </pre>
       *
       * <code>optional bytes query_message = 10;</code>
       */
      public com.google.protobuf.ByteString getQueryMessage() {
        return queryMessage_;
      }
      /**
       * <pre>
       * The initiator's original wire-format DNS query message, verbatim.
       * </pre>
       *
       * <code>optional bytes query_message = 10;</code>
       */
      public Builder setQueryMessage(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000200;
        queryMessage_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The initiator's original wire-format DNS query message, verbatim.
       * </pre>
       *
       * <code>optional bytes query_message = 10;</code>
       */
      public Builder clearQueryMessage() {
        bitField0_ = (bitField0_ & ~0x00000200);
        queryMessage_ = getDefaultInstance().getQueryMessage();
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString queryZone_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * The "zone" or "bailiwick" pertaining to the DNS query message.
       * This is a wire-format DNS domain name.
       * </pre>
       *
       * <code>optional bytes query_zone = 11;</code>
       */
      public boolean hasQueryZone() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <pre>
       * The "zone" or "bailiwick" pertaining to the DNS query message.
       * This is a wire-format DNS domain name.
       * </pre>
       *
       * <code>optional bytes query_zone = 11;</code>
       */
      public com.google.protobuf.ByteString getQueryZone() {
        return queryZone_;
      }
      /**
       * <pre>
       * The "zone" or "bailiwick" pertaining to the DNS query message.
       * This is a wire-format DNS domain name.
       * </pre>
       *
       * <code>optional bytes query_zone = 11;</code>
       */
      public Builder setQueryZone(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000400;
        queryZone_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The "zone" or "bailiwick" pertaining to the DNS query message.
       * This is a wire-format DNS domain name.
       * </pre>
       *
       * <code>optional bytes query_zone = 11;</code>
       */
      public Builder clearQueryZone() {
        bitField0_ = (bitField0_ & ~0x00000400);
        queryZone_ = getDefaultInstance().getQueryZone();
        onChanged();
        return this;
      }

      private long responseTimeSec_ ;
      /**
       * <pre>
       * The time at which the DNS response message was sent or received,
       * depending on whether this is an AUTH_RESPONSE, RESOLVER_RESPONSE, or
       * CLIENT_RESPONSE.
       * This is the number of seconds since the UNIX epoch.
       * </pre>
       *
       * <code>optional uint64 response_time_sec = 12;</code>
       */
      public boolean hasResponseTimeSec() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <pre>
       * The time at which the DNS response message was sent or received,
       * depending on whether this is an AUTH_RESPONSE, RESOLVER_RESPONSE, or
       * CLIENT_RESPONSE.
       * This is the number of seconds since the UNIX epoch.
       * </pre>
       *
       * <code>optional uint64 response_time_sec = 12;</code>
       */
      public long getResponseTimeSec() {
        return responseTimeSec_;
      }
      /**
       * <pre>
       * The time at which the DNS response message was sent or received,
       * depending on whether this is an AUTH_RESPONSE, RESOLVER_RESPONSE, or
       * CLIENT_RESPONSE.
       * This is the number of seconds since the UNIX epoch.
       * </pre>
       *
       * <code>optional uint64 response_time_sec = 12;</code>
       */
      public Builder setResponseTimeSec(long value) {
        bitField0_ |= 0x00000800;
        responseTimeSec_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The time at which the DNS response message was sent or received,
       * depending on whether this is an AUTH_RESPONSE, RESOLVER_RESPONSE, or
       * CLIENT_RESPONSE.
       * This is the number of seconds since the UNIX epoch.
       * </pre>
       *
       * <code>optional uint64 response_time_sec = 12;</code>
       */
      public Builder clearResponseTimeSec() {
        bitField0_ = (bitField0_ & ~0x00000800);
        responseTimeSec_ = 0L;
        onChanged();
        return this;
      }

      private int responseTimeNsec_ ;
      /**
       * <pre>
       * The time at which the DNS response message was sent or received.
       * This is the seconds fraction, expressed as a count of nanoseconds.
       * </pre>
       *
       * <code>optional fixed32 response_time_nsec = 13;</code>
       */
      public boolean hasResponseTimeNsec() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <pre>
       * The time at which the DNS response message was sent or received.
       * This is the seconds fraction, expressed as a count of nanoseconds.
       * </pre>
       *
       * <code>optional fixed32 response_time_nsec = 13;</code>
       */
      public int getResponseTimeNsec() {
        return responseTimeNsec_;
      }
      /**
       * <pre>
       * The time at which the DNS response message was sent or received.
       * This is the seconds fraction, expressed as a count of nanoseconds.
       * </pre>
       *
       * <code>optional fixed32 response_time_nsec = 13;</code>
       */
      public Builder setResponseTimeNsec(int value) {
        bitField0_ |= 0x00001000;
        responseTimeNsec_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The time at which the DNS response message was sent or received.
       * This is the seconds fraction, expressed as a count of nanoseconds.
       * </pre>
       *
       * <code>optional fixed32 response_time_nsec = 13;</code>
       */
      public Builder clearResponseTimeNsec() {
        bitField0_ = (bitField0_ & ~0x00001000);
        responseTimeNsec_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString responseMessage_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * The responder's original wire-format DNS response message, verbatim.
       * </pre>
       *
       * <code>optional bytes response_message = 14;</code>
       */
      public boolean hasResponseMessage() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <pre>
       * The responder's original wire-format DNS response message, verbatim.
       * </pre>
       *
       * <code>optional bytes response_message = 14;</code>
       */
      public com.google.protobuf.ByteString getResponseMessage() {
        return responseMessage_;
      }
      /**
       * <pre>
       * The responder's original wire-format DNS response message, verbatim.
       * </pre>
       *
       * <code>optional bytes response_message = 14;</code>
       */
      public Builder setResponseMessage(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00002000;
        responseMessage_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The responder's original wire-format DNS response message, verbatim.
       * </pre>
       *
       * <code>optional bytes response_message = 14;</code>
       */
      public Builder clearResponseMessage() {
        bitField0_ = (bitField0_ & ~0x00002000);
        responseMessage_ = getDefaultInstance().getResponseMessage();
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:dnstap.Message)
    }

    // @@protoc_insertion_point(class_scope:dnstap.Message)
    private static final org.graylog.plugins.dnstap.protos.DnstapOuterClass.Message DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.graylog.plugins.dnstap.protos.DnstapOuterClass.Message();
    }

    public static org.graylog.plugins.dnstap.protos.DnstapOuterClass.Message getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<Message>
        PARSER = new com.google.protobuf.AbstractParser<Message>() {
      public Message parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new Message(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Message> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Message> getParserForType() {
      return PARSER;
    }

    public org.graylog.plugins.dnstap.protos.DnstapOuterClass.Message getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_dnstap_Dnstap_descriptor;
  private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_dnstap_Dnstap_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_dnstap_Message_descriptor;
  private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_dnstap_Message_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\014dnstap.proto\022\006dnstap\"\224\001\n\006Dnstap\022\020\n\010ide" +
      "ntity\030\001 \001(\014\022\017\n\007version\030\002 \001(\014\022\r\n\005extra\030\003 " +
      "\001(\014\022!\n\004type\030\017 \002(\0162\023.dnstap.Dnstap.Type\022 " +
      "\n\007message\030\016 \001(\0132\017.dnstap.Message\"\023\n\004Type" +
      "\022\013\n\007MESSAGE\020\001\"\205\005\n\007Message\022\"\n\004type\030\001 \002(\0162" +
      "\024.dnstap.Message.Type\022+\n\rsocket_family\030\002" +
      " \001(\0162\024.dnstap.SocketFamily\022/\n\017socket_pro" +
      "tocol\030\003 \001(\0162\026.dnstap.SocketProtocol\022\025\n\rq" +
      "uery_address\030\004 \001(\014\022\030\n\020response_address\030\005" +
      " \001(\014\022\022\n\nquery_port\030\006 \001(\r\022\025\n\rresponse_por",
      "t\030\007 \001(\r\022\026\n\016query_time_sec\030\010 \001(\004\022\027\n\017query" +
      "_time_nsec\030\t \001(\007\022\025\n\rquery_message\030\n \001(\014\022" +
      "\022\n\nquery_zone\030\013 \001(\014\022\031\n\021response_time_sec" +
      "\030\014 \001(\004\022\032\n\022response_time_nsec\030\r \001(\007\022\030\n\020re" +
      "sponse_message\030\016 \001(\014\"\356\001\n\004Type\022\016\n\nAUTH_QU" +
      "ERY\020\001\022\021\n\rAUTH_RESPONSE\020\002\022\022\n\016RESOLVER_QUE" +
      "RY\020\003\022\025\n\021RESOLVER_RESPONSE\020\004\022\020\n\014CLIENT_QU" +
      "ERY\020\005\022\023\n\017CLIENT_RESPONSE\020\006\022\023\n\017FORWARDER_" +
      "QUERY\020\007\022\026\n\022FORWARDER_RESPONSE\020\010\022\016\n\nSTUB_" +
      "QUERY\020\t\022\021\n\rSTUB_RESPONSE\020\n\022\016\n\nTOOL_QUERY",
      "\020\013\022\021\n\rTOOL_RESPONSE\020\014*#\n\014SocketFamily\022\010\n" +
      "\004INET\020\001\022\t\n\005INET6\020\002*\"\n\016SocketProtocol\022\007\n\003" +
      "UDP\020\001\022\007\n\003TCP\020\002"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_dnstap_Dnstap_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_dnstap_Dnstap_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_dnstap_Dnstap_descriptor,
        new java.lang.String[] { "Identity", "Version", "Extra", "Type", "Message", });
    internal_static_dnstap_Message_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_dnstap_Message_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_dnstap_Message_descriptor,
        new java.lang.String[] { "Type", "SocketFamily", "SocketProtocol", "QueryAddress", "ResponseAddress", "QueryPort", "ResponsePort", "QueryTimeSec", "QueryTimeNsec", "QueryMessage", "QueryZone", "ResponseTimeSec", "ResponseTimeNsec", "ResponseMessage", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
